<?xml version="1.0"?>
<doc>
    <assembly>
        "vJine.Lua"
    </assembly>
    <members>
        <member name="M:vJine.Lua.LuaContext.print_vars">
            <summary>打印堆栈中的所有变量</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.print_var(System.String)">
            <summary>打印全局变量</summary>
            <param name="name">全局变量名称</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.print_var(System.Int32,System.Int32)">
            <summary>打印堆栈中指定索引的变量</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.print_var(System.Int32)">
            <summary>打印堆栈中指定索引的变量</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.print_var">
            <summary>打印栈顶变量</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.reg``1(System.String)">
            <summary>注册类</summary>
            <typeparam name="T">类类型</typeparam>
            <param name="nameSpace">类名</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.reg``1">
            <summary>注册类</summary>
            <typeparam name="T">类类型</typeparam>
        </member>
        <member name="M:vJine.Lua.LuaContext.reg(System.String,System.Delegate)">
            <summary>注册代理方法</summary>
            <param name="func_name">方法名称</param>
            <param name="action">回调代理</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.exec(System.String,System.Object[])">
            <summary>执行脚本方法</summary>
            <param name="func_name">方法名称</param>
            <param name="args">方法参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.gc">
            <summary>释放资源</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.load(System.String,System.Boolean)">
            <summary>加载并运行脚本</summary>
            <param name="script_file">脚本文件</param>
            <param name="reset">如果未true则重置运行环境（关闭并重建lua_State）</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.load(System.String)">
            <summary>加载并运行脚本(不重置运行环境)</summary>
            <param name="script_file">脚本文件</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.inject(System.String)">
            <summary>注入并运行脚本</summary>
            <param name="script_text">脚本文本</param>
            <returns>返回值</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.get``1(System.String,``0)">
            <summary>从全局变量读取T类型值</summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">全局变量名</param>
            <param name="value">读取值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get``1(System.String)">
            <summary>从全局变量读取T类型值</summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">全局变量名</param>
            <returns>读取的值</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.set``1(System.String,``0)">
            <summary>设置全局变量为T类型值</summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="name">全局变量名</param>
            <param name="data">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get``1(``0)">
            <summary>从栈顶读取T类型值</summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get``1">
            <summary>从栈顶读取T类型值</summary>
            <typeparam name="T">数据类型</typeparam>
            <returns>读取的值</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.set``1(``0)">
            <summary>将T类型数值保存到栈顶</summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="value">设置值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.String@)">
            <summary>从全局变量读取string类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.String)">
            <summary>设置全局变量为string类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.Double@)">
            <summary>从全局变量读取double类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.Double)">
            <summary>设置全局变量为double类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.Single@)">
            <summary>从全局变量读取float类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.Single)">
            <summary>设置全局变量为float类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.UInt64@)">
            <summary>从全局变量读取ulong类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.UInt64)">
            <summary>设置全局变量为ulong类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.Int64@)">
            <summary>从全局变量读取long类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.Int64)">
            <summary>设置全局变量为long类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.UInt32@)">
            <summary>从全局变量读取uint类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.UInt32)">
            <summary>设置全局变量为uint类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.Int32@)">
            <summary>从全局变量读取int类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.Int32)">
            <summary>设置全局变量为int类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.UInt16@)">
            <summary>从全局变量读取ushort类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.UInt16)">
            <summary>设置全局变量为ushort类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.Int16@)">
            <summary>从全局变量读取short类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.Int16)">
            <summary>设置全局变量为short类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.Byte@)">
            <summary>从全局变量读取byte类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.Byte)">
            <summary>设置全局变量为byte类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.SByte@)">
            <summary>从全局变量读取sbyte类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.SByte)">
            <summary>设置全局变量为sbyte类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String,System.Boolean@)">
            <summary>从全局变量读取bool类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String,System.Boolean)">
            <summary>设置全局变量为bool类型值</summary>
            <param name="name">全局变量名</param>
            <param name="value">设置的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.String@)">
            <summary>从栈顶读取string类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.String)">
            <summary>将string类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.Double@)">
            <summary>从栈顶读取double类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.Double)">
            <summary>将double类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.Single@)">
            <summary>从栈顶读取float类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.Single)">
            <summary>将float类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.UInt64@)">
            <summary>从栈顶读取ulong类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.UInt64)">
            <summary>将ulong类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.Int64@)">
            <summary>从栈顶读取long类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.Int64)">
            <summary>将long类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.UInt32@)">
            <summary>从栈顶读取uint类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.UInt32)">
            <summary>将uint类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.Int32@)">
            <summary>从栈顶读取int类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.Int32)">
            <summary>将int类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.UInt16@)">
            <summary>从栈顶读取ushort类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.UInt16)">
            <summary>将ushort类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.Int16@)">
            <summary>从栈顶读取short类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.Int16)">
            <summary>将short类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.Byte@)">
            <summary>从栈顶读取byte类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.Byte)">
            <summary>将byte类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.SByte@)">
            <summary>从栈顶读取sbyte类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.SByte)">
            <summary>将sbyte类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.get(System.Boolean@)">
            <summary>从栈顶读取bool类型数值</summary>
            <param name="value">读取的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.set(System.Boolean)">
            <summary>将bool类型数值保存到栈顶</summary>
            <param name="value">保存的值</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.clear(System.Int32)">
            <summary>清空堆栈至指定数量的元素</summary>
            <param name="remain">保留的元素数量</param>
        </member>
        <member name="M:vJine.Lua.LuaContext.clear">
            <summary>清空堆栈</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_object(System.String)">
            <summary>判断全局变量是否是table类型</summary>
            <param name="name">全局变量名</param>
            <returns>如果是table类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_object">
            <summary>判断栈顶元素是否是table类型</summary>
            <returns>如果是table类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_string(System.String)">
            <summary>判断全局变量是否是string类型</summary>
            <param name="name">全局变量名</param>
            <returns>如果是string类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_string">
            <summary>判断栈顶元素是否是string类型</summary>
            <returns>如果是string类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_number(System.String)">
            <summary>判断全局变量是否是number类型</summary>
            <param name="name">全局变量名</param>
            <returns>如果是number类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_number">
            <summary>判断栈顶元素是否是number类型</summary>
            <returns>如果是number类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_bool(System.String)">
            <summary>判断全局变量是否是bool类型</summary>
            <param name="name">全局变量名</param>
            <returns>如果是bool类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_bool">
            <summary>判断栈顶元素是否是bool类型</summary>
            <returns>如果是bool类型返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_null(System.String)">
            <summary>判断全局变量是否为空</summary>
            <param name="name">全局变量名</param>
            <returns>为空则返回true</returns>
        </member>
        <member name="M:vJine.Lua.LuaContext.is_null">
            <summary>判断栈顶元素是否为空</summary>
            <returns>为空则返回true</returns>
        </member>
        <member name="P:vJine.Lua.LuaContext.Version">
            <summary>获取Lua版本</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.Dispose">
            <summary>回收LuaContext类实例</summary>
        </member>
        <member name="M:vJine.Lua.LuaContext.#ctor">
            <summary>实例化LuaContext类</summary>
        </member>
        <member name="T:vJine.Lua.LuaContext">
            <summary>LuaContext类</summary>
        </member>
        <member name="T:vJine.Lua.NamespaceDoc">
            <summary>vJine.Lua是Lua语言的C#封装库，可实现通过C#直接运行Lua脚本并与Lua脚本交互的功能。</summary>
            <example>
		0) 定义类
		<code>
			public class MyClass {
				public MyClass My { get; set; }

				public bool B { get; set; }
				public bool? b { get; set; }
				public byte[] B_ { get; set; }

				public double D { get; set; }
				public double d { get; set; }

				public Guid G { get; set; }
				public Guid? g { get; set; }
				public Guid[] G_ { get; set; }

				public string S { get; set; }
				public string s { get; set; }
				public string[] s_ { get; set; }

				public DateTime DT { get; set; }
				public DateTime? dt { get; set; }
				public DateTime[] DT_ { get; set; }

				public MyStatus E { get; set; }
				public MyStatus? e { get; set; }
				public MyStatus[] E_ { get; set; }

				public static void M(MyStatus E) {
					string msg = string.Format("result[anonymous]:{0}", E);
				}

				public void m(MyStatus E) {
					string msg = string.Format("result[anonymous]:{0}", E);
				}

				public static string SM(int a, string b) {
					return string.Format("SM:Result:a,{0};b,{1}", a, b);
				}

				public string IM(int a, string b) {
					return string.Format("IM:Result:a,{0};b,{1}", a, b);
				}

				public string show_properties() {
					return string.Format("Properties:b,{0};d,{1};s,{2}", this.B, this.D, this.s);
				}
			}
		</code>
		1）引用命名空间：
		<code>
			using vJine.Lua;
		</code>
		2）获取Lua版本：
		<code>
			string V = LuaContext.Version;
		</code>
		3）实例化LuaContext：
		<code>
			LuaContext luaContext = new LuaContext();
		</code>
		4）读写局部变量与全局变量：
		<code>
			string vars_name = "vJine.Lua.Vars.bool";
            bool v_bool = true;
            luaContext.set(true);
            luaContext.get(out v_bool);
            Debug.Assert(v_bool == true);
            luaContext.set(false);
            luaContext.get(out v_bool);
            Debug.Assert(v_bool == false);
            luaContext.set(vars_name, true);
            luaContext.get(vars_name, out v_bool);
            Debug.Assert(v_bool == true);
            luaContext.set(vars_name, false);
            luaContext.get(vars_name, out v_bool);
            Debug.Assert(v_bool == false);


            vars_name = "vJine.Lua.Vars.sbyte";
            sbyte v_sbyte = 0;
            luaContext.set(sbyte.MaxValue);
            luaContext.get(out v_sbyte);
            Debug.Assert(v_sbyte == sbyte.MaxValue);
            luaContext.set(sbyte.MinValue);
            luaContext.get(out v_sbyte);
            Debug.Assert(v_sbyte == sbyte.MinValue);

            luaContext.set(vars_name, sbyte.MaxValue);
            luaContext.get(vars_name, out v_sbyte);
            Debug.Assert(v_sbyte == sbyte.MaxValue);
            luaContext.set(vars_name, sbyte.MinValue);
            luaContext.get(vars_name, out v_sbyte);
            Debug.Assert(v_sbyte == sbyte.MinValue);


            vars_name = "vJine.Lua.Vars.byte";
            byte v_byte = 0;
            luaContext.set(byte.MaxValue);
            luaContext.get(out v_byte);
            Debug.Assert(v_byte == byte.MaxValue);
            luaContext.set(byte.MinValue);
            luaContext.get(out v_byte);
            Debug.Assert(v_byte == byte.MinValue);

            luaContext.set(vars_name, byte.MaxValue);
            luaContext.get(vars_name, out v_byte);
            Debug.Assert(v_byte == byte.MaxValue);
            luaContext.set(vars_name, byte.MinValue);
            luaContext.get(vars_name, out v_byte);
            Debug.Assert(v_byte == byte.MinValue);


            vars_name = "vJine.Lua.Vars.short";
            short v_short = 0;
            luaContext.set(short.MaxValue);
            luaContext.get(out v_short);
            Debug.Assert(v_short == short.MaxValue);
            luaContext.set(short.MinValue);
            luaContext.get(out v_short);
            Debug.Assert(v_short == short.MinValue);

            luaContext.set(vars_name, short.MaxValue);
            luaContext.get(vars_name, out v_short);
            Debug.Assert(v_short == short.MaxValue);
            luaContext.set(vars_name, short.MinValue);
            luaContext.get(vars_name, out v_short);
            Debug.Assert(v_short == short.MinValue);


            vars_name = "vJine.Lua.Vars.ushort";
            ushort v_ushort = 0;
            luaContext.set(ushort.MaxValue);
            luaContext.get(out v_ushort);
            Debug.Assert(v_ushort == ushort.MaxValue);
            luaContext.set(ushort.MinValue);
            luaContext.get(out v_ushort);
            Debug.Assert(v_ushort == ushort.MinValue);

            luaContext.set(vars_name, ushort.MaxValue);
            luaContext.get(vars_name, out v_ushort);
            Debug.Assert(v_ushort == ushort.MaxValue);
            luaContext.set(vars_name, ushort.MinValue);
            luaContext.get(vars_name, out v_ushort);
            Debug.Assert(v_ushort == ushort.MinValue);


            vars_name = "vJine.Lua.Vars.int";
            int v_int = 0;
            luaContext.set(int.MaxValue);
            luaContext.get(out v_int);
            Debug.Assert(v_int == int.MaxValue);
            luaContext.set(int.MinValue);
            luaContext.get(out v_int);
            Debug.Assert(v_int == int.MinValue);

            luaContext.set(vars_name, int.MaxValue);
            luaContext.get(vars_name, out v_int);
            Debug.Assert(v_int == int.MaxValue);
            luaContext.set(vars_name, int.MinValue);
            luaContext.get(vars_name, out v_int);
            Debug.Assert(v_int == int.MinValue);


            vars_name = "vJine.Lua.Vars.uint";
            uint v_uint = 0;
            luaContext.set(uint.MaxValue);
            luaContext.get(out v_uint);
            Debug.Assert(v_uint == uint.MaxValue);
            luaContext.set(uint.MinValue);
            luaContext.get(out v_uint);
            Debug.Assert(v_uint == uint.MinValue);

            luaContext.set(vars_name, uint.MaxValue);
            luaContext.get(vars_name, out v_uint);
            Debug.Assert(v_uint == uint.MaxValue);
            luaContext.set(vars_name, uint.MinValue);
            luaContext.get(vars_name, out v_uint);
            Debug.Assert(v_uint == uint.MinValue);


            vars_name = "vJine.Lua.Vars.long";
            long v_long = 0;
            luaContext.set(long.MaxValue);
            //luaContext.get(out v_long);
            //Debug.Assert(v_long == long.MaxValue, "long.max"); //最大值不过
            luaContext.set(long.MinValue);
            luaContext.get(out v_long);
            Debug.Assert(v_long == long.MinValue);

            luaContext.set(vars_name, long.MaxValue);
            //luaContext.get(vars_name, out v_long);
            //Debug.Assert(v_long == long.MaxValue, "long.max"); //最大值不过
            luaContext.set(vars_name, long.MinValue);
            luaContext.get(vars_name, out v_long);
            Debug.Assert(v_long == long.MinValue);


            vars_name = "vJine.Lua.Vars.ulong";
            ulong v_ulong = 0;
            luaContext.set(ulong.MaxValue);
            //luaContext.get(out v_ulong);
            //Debug.Assert(v_ulong == ulong.MaxValue, "ulong.max"); //最大值不过
            luaContext.set(ulong.MinValue);
            luaContext.get(out v_ulong);
            Debug.Assert(v_ulong == ulong.MinValue);

            luaContext.set(vars_name, ulong.MaxValue);
            //luaContext.get(vars_name, out v_ulong);
            //Debug.Assert(v_ulong == ulong.MaxValue, "ulong.max"); //最大值不过
            luaContext.set(vars_name, ulong.MinValue);
            luaContext.get(vars_name, out v_ulong);
            Debug.Assert(v_ulong == ulong.MinValue);


            vars_name = "vJine.Lua.Vars.float";
            float v_float = 0;
            luaContext.set(float.MaxValue);
            luaContext.get(out v_float);
            Debug.Assert(v_float == float.MaxValue);
            luaContext.set(float.MinValue);
            luaContext.get(out v_float);
            Debug.Assert(v_float == float.MinValue);

            luaContext.set(vars_name, float.MaxValue);
            luaContext.get(vars_name, out v_float);
            Debug.Assert(v_float == float.MaxValue);
            luaContext.set(vars_name, float.MinValue);
            luaContext.get(vars_name, out v_float);
            Debug.Assert(v_float == float.MinValue);


            vars_name = "vJine.Lua.Vars.double";
            double v_double = 0;
            luaContext.set(double.MaxValue);
            luaContext.get(out v_double);
            Debug.Assert(v_double == double.MaxValue);
            luaContext.set(double.MinValue);
            luaContext.get(out v_double);
            Debug.Assert(v_double == double.MinValue);

            luaContext.set(vars_name, double.MaxValue);
            luaContext.get(vars_name, out v_double);
            Debug.Assert(v_double == double.MaxValue);
            luaContext.set(vars_name, double.MinValue);
            luaContext.get(vars_name, out v_double);
            Debug.Assert(v_double == double.MinValue);

            string myTable = "vJine.Lua.Vars.MyTable";
            MyClass x1 =
                new MyClass() {
                    B = true, b = false, B_ = new byte[] { 1, 2, 3 }, D = 123.456, 
                    S = "vJine.Lua是Lua语言的C#封装库，可实现通过C#直接运行Lua脚本并与Lua脚本交互的功能。",
                    G = Guid.NewGuid(), DT = DateTime.Now, E = MyStatus.L, E_ = new MyStatus[] { MyStatus.E, MyStatus.O },
                    My = new MyClass() { s = "xVx", B = true, D = 9.99, G = Guid.NewGuid(), e = MyStatus.O, My = new MyClass() { } }
                };
            luaContext.set&lt;MyClass&gt;(myTable, x1);

            MyClass x2 = luaContext.get&lt;MyClass&gt;(myTable);
            {
                Debug.Assert(x1.B == x2.B);
                Debug.Assert(x1.D == x2.D);
                Debug.Assert(x1.s == x2.s);
            }

            luaContext.print_var("vJine.Lua.Vars");
		</code>
		5）注册匿名方法：
		<code>
			luaContext.reg("vJine.Lua.funcs.anony", new Action&lt;MyStatus&gt;((MyStatus E) =&gt; {
				string msg = string.Format("result[anonymous]:{0}", E);
			}));
		</code>
		6）注册实例方法：
		<code>
			MyClass xq = new MyClass();
			luaContext.reg("vJine.Lua.funcs.m", new Action&lt;MyStatus&gt;(x1.m));
		</code>
		7）注册类（默认名称）
		<code>
			luaContext.reg&lt;MyClass&gt;();
		</code>
		8）注册类（自定义名称）：
		<code>
			luaContext.reg&lt;MyClass&gt;("vJine.Lua.YourClass");
		</code>
		9）注入脚本：
		<code>
			object[] R = luaContext.inject(
                "function callback(my_arg) return my_arg .. ' on_the_fly' end return true, 1.234, callback('vJine.Lua')");
		</code>
		10）调用脚本：
		<code>
			object[] Obj = luaContext.exec("callback", "vJine.Lua");
		</code>
		11）加载脚本：
		<code>
			R = luaContext.load("d:/vJine.Lua/start.lua");
		</code>
		12）打印堆栈变量：
		<code>
			luaContext.print_vars();
		</code>
		13）打印全局变量：
		<code>
			luaContext.print_vars("vJine.Lua.Vars");
		</code></example>
        </member>
    </members>
</doc>